
%macro add_bl_al 0
	db	0x02,0xd8 ; add bl, al
%endmacro

%macro add_ax_dx 0
	db	0x03,0xc2 ; add ax, dx
%endmacro

%macro add_dx_ax 0
	db	0x03,0xd0 ; add dx, ax
%endmacro

%macro add_bx_ax 0
	db	0x03,0xd8 ; add bx, ax
%endmacro

%macro add_bx_dx 0
	db	0x03,0xda ; add bx, dx
%endmacro

%macro add_si_cx 0
	db	0x03,0xf1 ; add si, cx
%endmacro

%macro add_si_dx 0
	db	0x03,0xf2 ; add si, dx
%endmacro

%macro add_di_ax 0
	db	0x03,0xf8 ; add di, ax
%endmacro

%macro add_di_cx 0
	db	0x03,0xf9 ; add di, cx
%endmacro

%macro or_dh_ah 0
	db	0x0a,0xf4 ; or dh, ah
%endmacro

%macro or_ax_dx 0
	db	0x0b,0xc2 ; or ax, dx
%endmacro

%macro or_dx_di 0
	db	0x0b,0xd7 ; or dx, di
%endmacro

%macro adc_cx_cx 0
	db	0x13,0xc9 ; adc cx, cx
%endmacro

%macro sbb_ax_ax 0
	db	0x1b,0xc0 ; adc cx, cx
%endmacro

%macro and_dl_al 0
	db	0x22,0xd0 ; and dl, al
%endmacro

%macro and_bx_dx 0
	db	0x23,0xda ; and bx, dx
%endmacro

%macro and_si_dx 0
	db	0x23,0xf2 ; and si, dx
%endmacro

%macro sub_al_dl 0
	db	0x2a,0xc2 ; sub al, dl
%endmacro

%macro sub_al_dh 0
	db	0x2a,0xc6 ; sub al, dh
%endmacro

%macro sub_bl_ah 0
	db	0x2a,0xdc ; sub bl, ah
%endmacro

%macro sub_ax_di 0
	db	0x2b,0xc7 ; sub ax, di
%endmacro

%macro sub_cx_dx 0
	db	0x2b,0xca ; sub cx, dx
%endmacro

%macro sub_cx_di 0
	db	0x2b,0xcf ; sub cx, di
%endmacro

%macro sub_dx_cx 0
	db	0x2b,0xd1 ; sub dx, cx
%endmacro

%macro sub_bx_ax 0
	db	0x2b,0xd8 ; sub bx, ax
%endmacro

%macro sub_bx_si 0
	db	0x2b,0xde ; sub bx, si
%endmacro

%macro sub_si_ax 0
	db	0x2b,0xf0 ; sub si, ax
%endmacro

%macro sub_di_bx 0
	db	0x2b,0xfb ; sub di, bx
%endmacro

%macro xor_al_al 0
	db	0x32,0xc0 ; xor al, al
%endmacro

%macro xor_al_ah 0
	db	0x32,0xc4 ; xor al, ah
%endmacro

%macro xor_al_dh 0
	db	0x32,0xc6 ; xor al, dh
%endmacro

%macro xor_dl_al 0
	db	0x32,0xd0 ; xor dl, al
%endmacro

%macro xor_dl_dl 0
	db	0x32,0xd2 ; xor dl, dl
%endmacro

%macro xor_ah_ah 0
	db	0x32,0xe4 ; xor ah, ah
%endmacro

%macro xor_ch_ch 0
	db	0x32,0xed ; xor ch, ch
%endmacro

%macro xor_dh_dh 0
	db	0x32,0xf6 ; xor dh, dh
%endmacro

%macro xor_bh_bh 0
	db	0x32,0xff ; xor bh, bh
%endmacro

%macro xor_ax_ax 0
	db	0x33,0xc0 ; xor ax, ax
%endmacro

%macro xor_cx_cx 0
	db	0x33,0xc9 ; xor cx, cx
%endmacro

%macro xor_dx_ax 0
	db	0x33,0xd0 ; xor dx, ax
%endmacro

%macro xor_dx_cx 0
	db	0x33,0xd1 ; xor dx, cx
%endmacro

%macro xor_dx_dx 0
	db	0x33,0xd2 ; xor dx, dx
%endmacro

%macro xor_bx_ax 0
	db	0x33,0xd8 ; xor bx, ax
%endmacro

%macro xor_bx_bx 0
	db	0x33,0xdb ; xor bx, bx
%endmacro

%macro xor_si_si 0
	db	0x33,0xf6 ; xor si, si
%endmacro

%macro xor_di_di 0
	db	0x33,0xff ; xor di, di
%endmacro

%macro cmp_bl_ah 0
	db	0x3a,0xdc ; cmp bl, ah
%endmacro

%macro cmp_ah_dl 0
	db	0x3a,0xe2 ; cmp ah, dl
%endmacro

%macro cmp_ax_dx 0
	db	0x3b,0xc2 ; cmp ax, dx
%endmacro

%macro cmp_cx_dx 0
	db	0x3b,0xca ; cmp cx, dx
%endmacro

%macro cmp_bx_si 0
	db	0x3b,0xde ; cmp bx, si
%endmacro

%macro cmp_di_dx 0
	db	0x3b,0xfa ; cmp di, dx
%endmacro

%macro mov_al_cl 0
	db	0x8a,0xc1 ; mov al, cl
%endmacro

%macro mov_al_dl 0
	db	0x8a,0xc2 ; mov al, dl
%endmacro

%macro mov_al_ah 0
	db	0x8a,0xc4 ; mov al, ah
%endmacro

%macro mov_al_dh 0
	db	0x8a,0xc6 ; mov al, dh
%endmacro

%macro mov_cl_al 0
	db	0x8a,0xc8 ; mov cl, al
%endmacro

%macro mov_cl_ah 0
	db	0x8a,0xcc ; mov cl, ah
%endmacro

%macro mov_cl_ch 0
	db	0x8a,0xcd ; mov cl, ch
%endmacro

%macro mov_dl_al 0
	db	0x8a,0xd0 ; mov dl, al
%endmacro

%macro mov_dl_ah 0
	db	0x8a,0xd4 ; mov dl, ah
%endmacro

%macro mov_bl_al 0
	db	0x8a,0xd8 ; mov bl, al
%endmacro

%macro mov_bl_ah 0
	db	0x8a,0xdc ; mov bl, ah
%endmacro

%macro mov_ah_cl 0
	db	0x8a,0xe1 ; mov ah, cl
%endmacro

%macro mov_ch_cl 0
	db	0x8a,0xe9 ; mov ch, cl
%endmacro

%macro mov_dh_al 0
	db	0x8a,0xf0 ; mov dh, al
%endmacro

%macro mov_ax_cx 0
	db	0x8b,0xc1 ; mov ax, cx
%endmacro

%macro mov_ax_dx 0
	db	0x8b,0xc2 ; mov ax, dx
%endmacro

%macro mov_ax_bx 0
	db	0x8b,0xc3 ; mov ax, bx
%endmacro

%macro mov_ax_si 0
	db	0x8b,0xc6 ; mov ax, si
%endmacro

%macro mov_cx_ax 0
	db	0x8b,0xc8 ; mov cx, ax
%endmacro

%macro mov_cx_dx 0
	db	0x8b,0xca ; mov cx, dx
%endmacro

%macro mov_cx_di 0
	db	0x8b,0xcf ; mov cx, di
%endmacro

%macro mov_dx_ax 0
	db	0x8b,0xd0 ; mov dx, ax
%endmacro

%macro mov_dx_bx 0
	db	0x8b,0xd3 ; mov dx, bx
%endmacro

%macro mov_dx_si 0
	db	0x8b,0xd6 ; mov dx, si
%endmacro

%macro mov_dx_di 0
	db	0x8b,0xd7 ; mov dx, di
%endmacro

%macro mov_bx_ax 0
	db	0x8b,0xd8 ; mov bx, ax
%endmacro

%macro mov_bx_cx 0
	db	0x8b,0xd9 ; mov bx, cx
%endmacro

%macro mov_bx_dx 0
	db	0x8b,0xda ; mov bx, dx
%endmacro

%macro mov_bx_si 0
	db	0x8b,0xde ; mov bx, si
%endmacro

%macro mov_sp_bp 0
	db	0x8b,0xe5 ; mov sp, bp
%endmacro

%macro mov_bp_sp 0
	db	0x8b,0xec ; mov bp, sp
%endmacro

%macro mov_si_ax 0
	db	0x8b,0xf0 ; mov si, ax
%endmacro

%macro mov_si_cx 0
	db	0x8b,0xf1 ; mov si, cx
%endmacro

%macro mov_si_di 0
	db	0x8b,0xf7 ; mov si, di
%endmacro

%macro mov_di_ax 0
	db	0x8b,0xf8 ; mov di, ax
%endmacro

%macro mov_di_si 0
	db	0x8b,0xfe ; mov di, si
%endmacro

; long conditional jump if zero
%macro ljz	1
	jnz	%%post
	jmp	%1
%%post:
%endmacro

; long conditional jump if not sign
%macro ljns	1
	js	%%post
	jmp	%1
%%post:
%endmacro

; long conditional jump if not zero
%macro ljnz	1
	jz	%%post
	jmp	%1
%%post:
%endmacro

; long conditional jump if signed
%macro ljs	1
	jns	%%post
	jmp	%1
%%post:
%endmacro

	db	0x4d,0x5a,0xfc,0x01,0x1e,0x00,0x04,0x00,0x20,0x00,0x00,0x00,0xff,0xff,0x55,0x0a
	db	0x00,0x04,0x0d,0x8b,0x10,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x01,0x00,0x11,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x7b,0x00,0x00,0x00,0xc8,0x0b,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1c,0x00,0x00
	db	0x11,0x00,0x00,0x00,0x47,0x00,0x00,0x00,0x7b,0x00,0x00,0x00,0xc8,0x0b,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00

sub_210: ; start
	mov	ax,0x157
	mov	es,ax
	call	sub_1304
	mov	dx,0xcb
	cmp	ax,0x31e
	jc	.L1
	call	sub_130b
	mov	[es:0x8],ax
	mov	[es:0xc],cx
	mov	[es:0xa],dx
	mov	ax,ds
	mov	bx,es
	add	bx,0x1000
	sub_bx_ax
	mov	es,ax
	mov	ah,0x4a
	int	0x21
	mov	dx,0xa9
	jc	.L1
	mov	ax,0x157
	cli
	mov	ds,ax
	mov	es,ax
	mov	ss,ax
	mov	sp,0xfffa
	sti

	mov_bp_sp
	push	ds
	pop	es
	cld
	mov	di,0x3ec
	mov	cx,0x8fe0
	sub_cx_di
	xor_ax_ax
	shr	cx,1
	rep	stosw
	adc_cx_cx
	rep	stosb
	call	sub_140f
	call	sub_294
	xor_ax_ax
	push	ax
	call	sub_13ad ; exit, errorlevel 0
	add	sp,byte +0x2

.L1:
	mov	ax,0x157
	mov	ds,ax
	xor_ax_ax
	push	ax
	push	ds
	push	dx
	call	sub_1424
	add	sp,byte +0x6
	mov	ax,0xff
	push	ax
	call	sub_13ad ; exit, errorlevel 255
	add	sp,byte +0x2

sub_294:
	call	sub_733
	dw	0x00e9 ; '\nSelf-extracting diskette image processor (DOS), Version 1.03\n\x00'
	xor_ax_ax
	push	ax
	push	ds
	mov	ax,0xe
	push	ax
	call	sub_1424
	add	sp,byte +0x6
	mov	ax,0x5358
	push	ax
	call	sub_846
	add	sp,byte +0x2
	test	ax,ax
	ljs	.L1
	call	sub_3ff
	test	ax,ax
	ljnz	.L1
	call	sub_441
	call	sub_4fa
	test	ax,ax
	ljnz	.L2
	call	sub_373
	test	al,al
	jnz	.L3
	xor_al_al
	push	ax
	mov	al,[0x40f]
	push	ax
	call	sub_104f
	add	sp,byte +0x4
	test	al,al
	jz	.L4
	mov	al,[0x626]
	push	ax
	mov	al,[0x40f]
	push	ax
	call	sub_104f
	add	sp,byte +0x4
	test	al,al
	jz	.L4

.L3:
	mov	[0x423],al
	mov	ax,0x1000
	push	ax
	call	sub_13b9
	add	sp,byte +0x2
	test	ax,ax
	jz	.L5
	mov	[0x3f8],ax
	mov	[0x3f0],ax
	mov	[0x3f4],ax
	mov	word [0x3ee],0x0
	mov	ax,[0x405]
	add	ax,byte +0x2
	mov_dx_ax
	mov	[0x3f2],ax
	add_ax_dx
	mov	[0x3f6],ax
	neg	ax
	sub	ax,byte +0x10
	mov	[0x3fa],ax
	call	sub_578
	test	ax,ax
	jnz	.L1
	mov	ax,0x5741
	push	ax
	call	sub_1578
	add	sp,byte +0x2
	xor_ax_ax
	push	ax
	call	sub_13ad
	add	sp,byte +0x2

.L1:
	call	sub_733
	dw	0x0128
	jmp	short .L6

.L2:
	call	sub_733
	dw	0x014d
	jmp	short .L6

.L5:
	call	sub_733
	dw	0x016c
	jmp	short .L6

.L4:
	call	sub_39b
	test	ax,ax
	js	.L6
	jmp	short .L3

.L6:
	mov	ax,0x1
	push	ax
	call	sub_13ad
	add	sp,byte +0x2

sub_373:
	push	es
	les	bx,[0xa]
	xor_dx_dx

.L2:
	mov	al,[es:bx]
	inc	bx
	test	al,al
	jz	.L1
	cmp	al,0x20
	jz	.L2
	cmp	byte [es:bx],0x3a
	jnz	.L1
	mov_dl_al
	and	dl,0x40
	shr	dl,1
	not	dl
	and_dl_al

.L1:
	mov_ax_dx
	pop	es
	ret

sub_39b:
	push	bp
	mov_bp_sp
	add	sp,byte -0xa

.L1:
	call	sub_733
	dw	0x0183
	mov	al,[0x40f]
	dec	al
	mov	ah,0x0b
	mul	ah
	mov_bx_ax
	db	0x8d,0x9f,0x67,0x00 ; lea bx,[bx+0x67]
	xor_ax_ax
	push	ax
	push	ds
	push	bx
	call	sub_1424
	add	sp,byte +0x6
	call	sub_733
	dw	0x01b3
	mov	al,0x1
	push	ax
	mov	ax,0x9
	push	ax
	lea	ax,[bp-0xa]
	push	ax
	call	sub_77b
	add	sp,byte +0x6
	push	ax
	call	sub_733
	dw	0x01d2
	pop	ax
	test	ax,ax
	js	.L0
	mov	al,[bp-0xa]
	cmp	al,0x41
	jc	.L1
	cmp	al,0x5a
	ja	.L1
	xor_ah_ah
	cmp	al,[0x626]
	jnz	.L0
	call	sub_733
	dw	0x01d4
	jmp	short .L1

.L0:
	mov_sp_bp
	pop	bp
	ret

sub_3ff:
	mov	ax,0x21
	push	ax
	push	ds
	mov	ax,0x402
	push	ax
	call	sub_70c
	add	sp,byte +0x6
	test	ax,ax
	jz	.L1

.L0:
	ret

.L1:
	cmp	word [0x402],0x5853
	jnz	.L2
	mov	ax,[0x411]
	mov	[0x400],ax
	mov	ax,[0x405]
	mov	[0x3fc],ax
	mov	ax,0x1f
	push	ax
	push	ds
	mov	ax,0x402
	push	ax
	call	sub_12d1
	add	sp,byte +0x6
	sub	ax,[0x421]
	jz	.L0

.L2:
	mov	ax,0xffff
	jmp	short .L0

sub_441:
	push	bp
	mov_bp_sp
	add	sp,0xfc00
	call	sub_733
	dw	0x0242
	mov	ax,0x627
	push	ax
	push	word [0x41f]
	push	word [0x41d]
	call	sub_93e
	add	sp,byte +0x6
	xor_ax_ax
	push	ax
	push	ds
	mov	ax,0x627
	push	ax
	call	sub_1424
	add	sp,byte +0x6
	call	sub_733
	dw	0x025d
	mov	cx,[0x415]
	jcxz	.L1
	cmp	cx,0x400
	ja	.L1
	push	cx
	push	ss
	lea	ax,[bp-0x400]
	push	ax
	call	sub_70c
	add	sp,byte +0x6
	test	ax,ax
	jnz	.L1
	push	word [0x415]
	push	ss
	lea	ax,[bp-0x400]
	push	ax
	call	sub_12d1
	add	sp,byte +0x6
	cmp	ax,[0x417]
	jnz	.L2
	push	word [0x415]
	push	ss
	lea	ax,[bp-0x400]
	push	ax
	call	sub_9da
	add	sp,byte +0x6
	push	ss
	pop	es
	cld
	lea	di,[bp-0x400]
	mov	cx,[0x415]
	mov_bx_cx
	mov	byte [ss:bx+di],0x0

.L3:
	jcxz	.L1
	push	cx
	push	di
	call	sub_733
	dw	0x0260
	pop	di
	push	di
	xor_ax_ax
	push	ax
	push	ds
	push	di
	call	sub_1424
	add	sp,byte +0x6
	call	sub_733
	dw	0x0263
	pop	di
	pop	cx
	cld
	xor_al_al
	repne	scasb
	jmp	short .L3

.L1:
	call	sub_733
	dw	0x0263
	xor_ax_ax

.L4:
	mov_sp_bp
	pop	bp
	ret

.L2:
	mov	ax,0xffff
	jmp	short .L4

sub_4fa:
	push bp
	mov_bp_sp
	add	sp,byte -0x16
	mov	ax,[0x400]
	test	ax,ax
	jnz	.L1

.L0:
	mov_sp_bp
	pop	bp
	ret

.L1:
	call	sub_733
	dw	0x0265
	mov	al,0x3
	push	ax
	mov	ax,0x13
	push	ax
	lea	ax,[bp-0x14]
	push	ax
	call	sub_77b
	add	sp,byte +0x6
	test	ax,ax
	js	.L0
	mov	[bp-0x16],ax
	push	word [bp-0x16]
	push	ss
	lea	ax,[bp-0x14]
	push	ax
	call	sub_12d1
	add	sp,byte +0x6
	cmp	ax,[0x411]
	jz	.L2

.L5:
	call	sub_733
	dw	0x028b
	jmp	short .L1

.L2:
	lea	si,[bp-0x14]
	mov	cx,[bp-0x16]
	xor_dx_dx
	xor_ah_ah

.L3:
	shl	dx,1
	lodsb
	xor_dx_ax
	loop	.L3
	dec	si
	std
	mov	cx,[bp-0x16]
	xor_bx_bx

.L4:
	lodsb
	not	bx
	shl	bx,1
	xor_bx_ax
	loop	.L4
	cld
	cmp	[0x413],dx
	jnz	.L5
	xor	[0x400],bx
	call	sub_733
	dw	0x0263
	xor_ax_ax
	jmp	short .L0

sub_578:
	push	bp
	mov_bp_sp
	add	sp,byte -0x8
	mov	al,0x1
	push	ax
	call	sub_a3e
	add	sp,byte +0x2
	push	word [0x3ec]
	mov	ax,0x5742
	push	ax
	call	sub_1578
	add	sp,byte +0x2
	pop	word [0x3ec]

.L10:
	call	sub_a93
	xor_al_al
	push	ax
	call	sub_a3e
	add	sp,byte +0x2
	mov	ax,[0x3ee]
	mov	[bp-0x8],ax
	mov	ax,[0x3f0]
	mov	[bp-0x6],ax
	call	sub_733
	dw	0x02a8
	mov	bl,[0x410]
	xor_bh_bh
	shl	bx,1
	db	0x8b,0x9f,0x54,0x00 ; mov bx,[bx+0x54]
	xor_ax_ax
	push	ax
	push	ds
	push	bx
	call	sub_1424
	add	sp,byte +0x6
	call	sub_733
	dw	0x2b9
	mov	al,[0x423]
	mov	[0x627],al
	mov	word [0x628],0x3a
	xor_ax_ax
	push	ax
	push	ds
	mov	ax,0x627
	push	ax
	call	sub_1424
	add	sp,byte +0x6
	call	sub_733
	dw	0x2d5

.L2:
	call	sub_1400
	call	sub_13ef
	cmp	al,0x1b
	jnz	.L1
	call	sub_733
	dw	0x014d
	xor_ax_ax

.L0:
	mov_sp_bp
	pop	bp
	ret

.L1:
	cmp	al,0xd
	jnz	.L2
	mov	al,0x1
	push	ax
	call	sub_1122
	add	sp,byte +0x2
	test	ax,ax
	ljnz	.L3
	call	sub_733
	dw	0x025d
	xor_ax_ax
	mov	[bp-0x1],al
	mov	[bp-0x2],al

.L8:
	mov	al,[bp-0x1]
	cmp	al,[0x40a]
	jc	.L4
	xor_ax_ax
	mov	[bp-0x8],ax
	mov	[bp-0x6],ax
	jmp	short .L5

.L4:
	call	sub_dd7
	test	ax,ax
	ljnz	.L6
	push	word [0x3fc]
	push	word [0x3f0]
	push	word [0x3ee]
	call	sub_12d1
	add	sp,byte +0x6
	cmp	ax,[0x3fe]
	ljnz	.L6
	mov	byte [bp-0x3],0x3

.L5:
	push	word [bp-0x6]
	push	word [bp-0x8]
	mov	al,[bp-0x2]
	push	ax
	mov	al,[bp-0x1]
	push	ax
	call	sub_f06
	add	sp,byte +0x8
	test	ax,ax
	jz	.L7
	dec	byte [bp-0x3]
	jnz	.L5
	jmp	.L3

.L7:
	inc	byte [bp-0x2]
	mov	al,[bp-0x2]
	cmp	al,[0x408]
	jnz	.L8
	mov	byte [bp-0x2],0x0
	inc	byte [bp-0x1]
	mov	di,0x5d
	mov	word [di-0x2],0x2020
	mov	al,[bp-0x1]
	mov	dh,0x64
	mul	dh
	div	byte [0x409]

.L9:
	aam
	add	al,0x30
	mov	[di],al
	dec	di
	mov_al_ah
	test	al,al
	jnz	.L9
	xor_ax_ax
	push	ax
	push	ds
	mov	ax,0x5a
	push	ax
	call	0x1424
	add	sp,byte +0x6
	mov	al,[bp-0x1]
	cmp	al,[0x409]
	ljnz	.L8
	call	sub_733
	dw	0x0300

.L11:
	xor_al_al
	push	ax
	call	sub_1122
	add	sp,byte +0x2
	call	sub_733
	dw	0x0316
	call	sub_1400
	call	sub_13ef
	push	ax
	call	sub_733
	dw	0x0263
	pop	ax
	and	al,0xdf
	cmp	al,0x59
	mov	ax,0x0
	ljnz	.L0
	jmp	.L10

.L6:
	mov	ax,0x1
	jmp	.L0

.L3:
	call	sub_733
	dw	0x0336
	jmp	short .L11

sub_70c:
	push	bp
	mov_bp_sp
	push	word [bp+0x8]
	push	word [bp+0x6]
	push	word [bp+0x4]
	push	word [0x3ec]
	call	sub_1359
	add	sp,byte +0x8
	cmp	ax,byte -0x1
	jz	.L1
	sub	ax,[bp+0x8]
	jnz	.L1

.L0:
	pop	bp
	ret

.L1:
	mov	ax,0xffff
	jmp	short .L0

sub_733:
	pop	bx
	mov	si,[cs:bx]
	inc	bx
	inc	bx
	push	bx
	cld
	mov	di,0x627
	push	ds
	pop	es
	mov	ah,0x55

.L3:
	lodsb
	xchg	al,ah
	xor_al_ah
	cmp	al,0xa
	jnz	.L1
	mov	byte [es:di],0xd
	inc	di

.L1:
	cmp	al,0x60
	jnz	.L2
	lodsb
	xchg	al,ah
	xor_al_ah
	sub	al,0x30
	mov_cl_al
	lodsb
	xchg	al,ah
	xor_al_ah
	xor_ch_ch
	dec	cx
	rep	stosb

.L2:
	stosb
	test	al,al
	jnz	.L3
	xor_ax_ax
	push	ax
	push	ds
	mov	ax,0x627
	push	ax
	call	sub_1424
	add	sp,byte +0x6
	ret

sub_77b:
	push	bp
	mov_bp_sp
	add	sp,byte -0x2
	mov	word [bp-0x2],0x0
	call	sub_1400

.L3:
	call	sub_13ef
	test	ah,0x40
	jz	.L1
	cmp	al,0x4b
	ljz	.L2
	jmp	short .L3

.L1:
	cmp	al,0xd
	jz	.L4
	cmp	al,0x1b
	jz	.L5
	cmp	al,0x8
	jz	.L2
	cmp	al,0x20
	jc	.L3
	test	byte [bp+0x8],0x1
	jz	.L6
	cmp	al,0x61
	jc	.L6
	cmp	al,0x7a
	ja	.L6
	sub	al,0x20

.L6:
	mov	bx,[bp+0x4]
	mov	[bx],al
	inc	bx
	mov	[bp+0x4],bx
	inc	word [bp-0x2]
	mov	cx,[bp-0x2]
	cmp	cx,[bp+0x6]
	jc	.L7
	dec	word [bp-0x2]
	dec	word [bp+0x4]
	mov	al,0x7
	push	ax
	call	sub_1410
	add	sp,byte +0x2
	jmp	short .L3

.L7:
	mov_dl_al
	test byte [bp+0x8],0x2
	jz	.L8
	mov	dl,0x2a

.L8:
	mov_al_dl
	push	ax
	call	sub_1410
	add	sp,byte +0x2
	jmp	short .L3

.L4:
	mov	bx,[bp+0x4]
	mov	byte [bx],0x0
	mov	ax,[bp-0x2]

.L0:
	mov_sp_bp
	pop	bp
	ret

.L5:
	mov	ax,0xffff
	cmp	word [bp-0x2],byte +0x0
	jz	.L0

.L9:
	call	sub_82a
	dec	word [bp-0x2]
	dec	word [bp+0x4]
	jnz	.L9
	jmp	.L3

.L2:
	cmp	word [bp-0x2],byte +0x0
	jz	.L10
	call	sub_82a
	dec	word [bp-0x2]
	dec	word [bp+0x4]

.L10:
	jmp	.L3

sub_82a:
	mov	al,0x8
	push	ax
	call	sub_1410
	add	sp,byte +0x2
	mov	al,0x20
	push	ax
	call	sub_1410
	add	sp,byte +0x2
	mov	al,0x8
	push	ax
	call	sub_1410
	add	sp,byte +0x2
	ret

sub_846:
	push	bp
	mov_bp_sp
	mov	es,[0x8]
	cld
	mov	cx,0xffff
	xor_di_di
	xor_al_al

.L1:
	repne	scasb
	scasb
	jnz	.L1
	inc	di
	inc	di
	mov	al,[es:di]
	and	al,0xdf
	cmp	byte [es:di+0x1],0x3a
	jz	.L2
	call	sub_132a

.L2:
	mov	[0x626],al
	push	word [bp+0x4]
	push	es
	push	di
	call	sub_87b
	add	sp,byte +0x6
	pop	bp
	ret

sub_87b:
	push bp
	mov_bp_sp
	add	sp,byte -0x6
	push	ds
	mov	ax,0x40
	push	ax
	push	word [bp+0x6]
	push	word [bp+0x4]
	call	sub_1333
	add	sp,byte +0x6
	cmp	ax,byte -0x1
	jz	.L1
	mov	[bp-0x2],ax

.L6:
	mov	ax,0x6
	push	ax
	push	ds
	mov	ax,0x6a7
	push	ax
	push	word [bp-0x2]
	call	sub_1359
	add	sp,byte +0x8
	cmp	ax,byte +0x2
	jc	.L2
	mov	ax,0x1
	push	ax
	mov	ax,0xffff
	push	ax
	mov	ax,0xfffa
	push	ax
	push	word [bp-0x2]
	call	sub_1393
	add	sp,byte +0x8
	mov	ax,[bp+0x8]
	xchg	al,ah
	cmp	[0x6a7],ax
	jz	.L4
	mov	ax,[0x6ab]
	cmp	word [0x6a9],byte +0x0
	jz	.L5
	dec	ax

.L5:
	shl	ax,1
	xor_ch_ch
	mov_cl_ah
	mov_dh_al
	xor_dl_dl
	add	dx,[0x6a9]
	mov	ax,0x1
	push	ax
	xor_ax_ax
	push	ax
	push	dx
	push	word [bp-0x2]
	call	sub_1393
	add	sp,byte +0x8
	jmp	short .L6

.L2:
	push	word [bp-0x2]
	call	sub_134d
	add	sp,byte +0x2

.L1:
	mov	ax,0xffff
	mov	[bp-0x2],ax

.L4:
	mov	ax,[bp-0x2]
	mov	[0x3ec],ax
	pop	ds
	mov_sp_bp
	pop	bp
	ret

	db	"   "
	db	"Jan"
	db	"Feb"
	db	"Mar"
	db	"Apr"
	db	"May"
	db	"Jun"
	db	"Jul"
	db	"Aug"
	db	"Sep"
	db	"Oct"
	db	"Nov"
	db	"Dec"

sub_93e:
	push	bp
	mov_bp_sp
	mov	bx,[bp+0x6]
	mov	dx,0x3030
	mov	cl,0x5
	shr	bx,cl
	mov	di,[bp+0x8]
	cld
	push	ds
	pop	es
	and	bx,byte +0xf
	mov_ax_bx
	shl	bx,1
	add_bx_ax
	mov	ax,[cs:bx+0x717]
	stosw
	mov	al,[cs:bx+0x719]
	mov	ah,0x20
	stosw
	mov	al,[bp+0x6]
	and	al,0x1f
	aam
	add_ax_dx
	stosb
	cmp_ah_dl
	jz	.L2
	xchg	al,ah
	dec	di
	stosw

.L2:
	mov	ax,0x202c
	stosw
	mov	ax,[bp+0x6]
	mov	cl,0x9
	shr	ax,cl
	add	ax,0x7bc
	mov	cl,0x64
	div	cl
	mov_cl_ah
	aam
	add_ax_dx
	xchg	ah,al
	stosw
	mov_al_cl
	aam
	add_ax_dx
	xchg	ah,al
	stosw
	mov	ax,0x2020
	stosw
	mov	ax,[bp+0x4]
	mov	cl,0xb
	shr	ax,cl
	aam
	add_ax_dx
	xchg	ah,al
	stosw
	mov	al,0x3a
	stosb
	mov	ax,[bp+0x4]
	mov	cl,0x5
	shr	ax,cl
	and	al,0x3f
	aam
	add_ax_dx
	xchg	ah,al
	stosw
	mov	al,0x3a
	stosb
	mov	al,[bp+0x4]
	and	al,0x1f
	shl	al,1
	aam
	add_ax_dx
	xchg	al,ah
	stosw
	mov	byte [es:di],0x0
	pop	bp
	ret

sub_9da:
	push	bp
	mov_bp_sp
	mov	dx,[0x400]
	test	dx,dx
	jz	.L1
	push	es
	push	si
	push	di
	les	di,[bp+0x4]
	mov	si,[bp+0x8]
	mov	dx,[0x400]

.L10:
	mov	ah,[es:di]
	mov_al_ah
	shl	dl,1
	jnc	.L2
	neg	al

.L2:
	shl	dl,1
	jnc	.L3
	not	al

.L3:
	shl	dl,1
	jnc	.L4
	mov	cl,0x4
	rol	al,cl

.L4:
	shl	dl,1
	jnc	.L5
	sub_al_dh
	sub_al_dh

.L5:
	shl	dl,1
	jnc	.L6
	sub_al_dh

.L6:
	shl	dl,1
	jnc	.L7
	ror	al,1
	ror	al,1

.L7:
	shl	dl,1
	jnc	.L8
	ror	al,1

.L8:
	shl	dl,1
	jnc	.L9
	xor_al_dh

.L9:
	mov	[es:di],al
	inc	di
	mov_dl_ah
	dec	si
	jnz	.L10
	pop	di
	pop	si
	pop	es

.L1:
	mov_ax_dx
	pop	bp
	ret

	db	0x00

sub_a3e:
	push	bp
	mov_bp_sp
	cmp	byte [bp+0x4],0x0
	jnz	.L1
	mov	ax,[0x8c2e]
	mov	[0x400],ax
	xor_ax_ax
	push	ax
	push	word [0x8c26]
	push	word [0x8c24]
	push	word [0x3ec]
	call	sub_1393
	add	sp,byte +0x8
	xor_ax_ax
	mov	[0x79e0],ax
	mov	[0x8c28],ax
	mov	[0x8c2a],ax
	mov	[0x8c2c],ax

.L0:
	pop	bp
	ret

.L1:
	mov	ax,[0x400]
	mov	[0x8c2e],ax
	mov	ax,0x1
	push	ax
	xor_ax_ax
	push	ax
	push	ax
	push	word [0x3ec]
	call	sub_1393
	add	sp,byte +0x8
	mov	[0x8c26],dx
	mov	[0x8c24],ax
	jmp	short .L0

sub_a93:
	push	ds
	pop	es
	mov	di,0x6ae
	mov	cx,0x8376
	xor_ax_ax
	cld
	rep	stosb
	mov	si,0x356
	mov	di,0x8a24

.L2:
	lodsb
	mov_cl_al
	jcxz	.L1
	lodsb
	rep	stosb
	jmp	short .L2

.L1:
	ret

sub_ab1:
	push	es
	push	ds
	pop	es
	mov	si,0x4e6
	mov	dx,0x2
	xor_bx_bx
	mov	di,0x68b4
	mov	cx,0x13a
	mov	ax,0x1

.L1:
	stosw
	mov	[bx+0x74f6],si
	mov	[si+0x6d9c],bx
	add_si_dx
	add_bx_dx
	loop	.L1
	xor_bx_bx
	mov	di,0x274
	mov	cx,0x139
	mov	si,0x68b4

.L2:
	lodsw
	mov_dx_ax
	lodsw
	add_ax_dx
	mov	[di+0x68b4],ax
	mov	[di+0x74f6],bx
	mov	[bx+0x6d9c],di
	mov	[bx+0x6d9e],di
	add	bx,byte +0x4
	inc	di
	inc	di
	loop	.L2
	mov	word [0x6d9a],0xffff
	mov	word [0x7280],0x0
	pop	es
	ret

sub_b0a:
	xor_di_di
	xor_si_si
	mov	dx,0x4e6
	mov	cx,0x2

.L2:
	cmp	[di+0x74f6],dx
	jc	.L1
	mov	ax,[di+0x68b4]
	inc	ax
	shr	ax,1
	mov	[si+0x68b4],ax
	mov	ax,[di+0x74f6]
	mov	[si+0x74f6],ax
	add_si_cx

.L1:
	add_di_cx
	cmp_di_dx
	jnz	.L2
	xor_di_di
	mov	si,0x274

.L4:
	mov	dx,[di+0x68b4]
	add	dx,[di+0x68b6]
	mov	[si+0x68b4],dx
	push	di
	mov_di_si

.L3:
	dec	di
	dec	di
	cmp	dx,[di+0x68b4]
	jc	.L3
	inc	di
	inc	di
	push	es
	push	ds
	pop	es
	mov_ax_si
	sub_ax_di
	push	si
	push	di
	std
	add_di_ax
	shr	ax,1
	mov_cx_ax
	push	di
	lea	di,[di+0x68b4]
	lea	si,[di-0x2]
	rep	movsw
	pop	di
	mov_cx_ax
	lea	di,[di+0x74f6]
	lea	si,[di-0x2]
	rep	movsw
	cld
	pop	di
	mov	[di+0x68b4],dx
	pop	si
	pop	ax
	mov	[di+0x74f6],ax
	mov_di_ax
	add	di,byte +0x4
	add	si,byte +0x2
	pop	es
	cmp	si,0x4e6
	jc	.L4
	xor_di_di

.L7:
	mov	ax,[di+0x74f6]
	mov_si_ax
	cmp	ax,0x4e6
	jc	.L5
	mov	[si+0x6d9c],di
	jmp	short .L6

.L5:
	mov	[si+0x6d9c],di
	mov	[si+0x6d9e],di

.L6:
	inc	di
	inc	di
	cmp	di,0x4e6
	jc	.L7
	ret

sub_bb8:
	mov_si_ax
	cmp	word [0x6d98],0x8000
	jnz	.L1
	push	si
	call	sub_b0a
	pop	si

.L1:
	mov	si,[si+0x7282]
	mov	bx,0x68b4

.L3:
	mov	ax,[bx+si]
	inc	ax
	mov	[bx+si],ax
	cmp	ax,[bx+si+0x2]
	ja	.L2

.L7:
	mov	si,[si+0x6d9c]
	test	si,si
	jnz	.L3
	ret

.L2:
	lea di,[bx+si+0x4]
	push	es
	push	ds
	pop	es

.L4:
	scasw
	ja	.L4
	pop	es
	sub	di,byte +0x4
	xchg	[di],ax
	mov	[bx+si],ax
	sub_di_bx
	mov_dx_bx
	mov	bx,[si+0x74f6]
	mov	[bx+0x6d9c],di
	cmp	bx,0x4e6
	jnc	.L5
	mov	[bx+0x6d9e],di

.L5:
	xchg	[di+0x74f6],bx
	mov	[bx+0x6d9c],si
	cmp	bx,0x4e6
	jnc	.L6
	mov	[bx+0x6d9e],si

.L6:
	mov	[si+0x74f6],bx
	mov_bx_dx
	mov_si_di
	jmp	short .L7

sub_c24:
	mov	cl,[0x8a23]
	sub	cl,0x8
	mov	dx,[0x79e2]
	jc	.L1
	mov_al_dh
	xor_dh_dh
	xchg	dl,dh
	mov	[0x79e2],dx
	mov	[0x8a23],cl
	ret

.L1:
	mov	si,[0x79e0]
	es	lodsw
	xchg	al,ah
	mov	[0x79e2],ax
	mov	[0x79e0],si
	mov_ch_cl
	add	cl,0x8
	shr	ax,cl
	add	cl,0x8
	mov	[0x8a23],cl
	or_dh_ah
	neg	ch
	mov_cl_ch
	shl	word [0x79e2],cl
	mov_al_dh
	ret

sub_c6a:
	mov	di,[0x79da]
	mov	bx,0x74f6
	cmp	di,0x4e6
	jnc	.L1
	mov	si,[0x79e2]
	mov	cl,[0x8a23]
	xor_ch_ch
	mov	dx,0x4e6

.L3:
	dec	cx
	js	.L2

.L4:
	shl	si,1
	sbb_ax_ax
	and	ax,byte +0x2
	add_di_ax
	mov	di,[bx+di]
	cmp_di_dx
	jc	.L3
	mov	[0x79e2],si
	mov	[0x8a23],cl

.L1:
	lea	ax,[di-0x4e6]
	push	ax
	call	sub_bb8
	pop	ax
	shr	ax,1
	ret

.L2:
	mov	si,[0x79e0]
	es	lodsw
	mov	[0x79e0],si
	xchg	al,ah
	mov_si_ax
	mov	cx,0xf
	jmp	short .L4

sub_cbd:
	call	sub_c24
	xor_ah_ah
	mov_di_ax
	mov	dl,[di+0x8b24]
	xor_dh_dh
	mov	cl,0x6
	shl	dx,cl
	mov	cl,[di+0x8a24]
	xor_ch_ch

.L2:
	dec	byte [0x8a23]
	jns	.L1
	mov	si,[0x79e0]
	es	lodsw
	xchg	al,ah
	mov	[0x79e2],ax
	mov	[0x79e0],si
	mov	byte [0x8a23],0xf

.L1:
	shl	word [0x79e2],1
	rcl	di,1
	loop	.L2
	and	di,byte +0x3f
	or_dx_di
	mov_ax_dx
	ret

sub_cfe:
	push	bp
	mov_bp_sp
	add	sp,byte -0x4
	mov	ax,0xbbf
	push	ax
	mov	[0x8c32],sp
	cld
	les	ax,[bp+0x8]
	mov	[0x79e4],ax
	mov	ax,[bp+0xe]
	mov	[bp-0x4],ax
	mov	si,[bp+0x4]
	mov	bx,[bp+0xc]
	test	bl,0x1
	jz	.L1
	mov	byte [es:bx+si],0x0

.L1:
	mov	[0x79e0],si
	es	lodsw
	xchg	al,ah
	mov	[0x79e2],ax
	mov	[0x79e0],si
	mov	byte [0x8a23],0x10
	call	sub_ab1
	mov	cx,0xfc4
	mov	[bp-0x2],cx
	push	es
	mov	ax,ds
	mov	es,ax
	mov	di,0x79e8
	xor_ax_ax
	shr	cx,1
	rep	stosw
	pop	es

.L3:
	call	sub_c6a
	test	ah,ah
	jnz	.L2
	mov	bx,[bp-0x2]
	mov	[bx+0x79e8],al
	inc	bx
	and	bh,0xf
	mov	[bp-0x2],bx
	mov	di,[0x79e4]
	stosb
	mov	[0x79e4],di
	dec	word [bp-0x4]
	jnz	.L3

.L6:
	xor_ax_ax
	mov_sp_bp
	pop	bp
	ret

.L2:
	add	ax,0xff03
	cmp	ax,[bp-0x4]
	jna	.L4
	mov	ax,[bp-0x4]

.L4:
	push	ax
	call	sub_cbd
	pop	cx
	push	cx
	mov	dx,0xfff
	mov	si,[bp-0x2]
	mov_bx_si
	dec	si
	sub_si_ax
	and_si_dx
	mov	di,[0x79e4]

.L5:
	mov	al,[si+0x79e8]
	mov	[bx+0x79e8],al
	stosb
	inc	si
	and_si_dx
	inc	bx
	and_bx_dx
	loop	.L5
	pop	dx
	mov	[0x79e4],di
	mov	[bp-0x2],bx
	sub	[bp-0x4],dx
	jz	.L6
	jnc	.L3
	mov	ax,0xffff
	mov_sp_bp
	pop	bp
	ret

	push	ax
	mov	ax,0x157
	mov	ds,ax
	pop	ax
	mov	sp,[0x8c32]
	or	byte [0x8c34],0x1
	ret

sub_dd7:
	push	bp
	mov_bp_sp
	add	sp,byte -0x2
	push	ds
	push	ds
	pop	es
	mov	di,0x3fe
	mov	dx,0x2
	call	sub_e76
	ljnz	.L1
	mov	di,0x8c30
	mov	dx,0x2
	call	sub_e76
	jnz	.L1
	les	di,[0x3f2]
	mov	dx,[0x8c30]
	test	dx,dx
	jns	.L2
	neg	dx

.L2:
	mov	ax,[0x3fc]
	inc	ax
	inc	ax
	cmp_ax_dx
	jc	.L1
	call	sub_e76
	jnz	.L1
	mov	ax,[0x8c30]
	test	ax,ax
	js	.L3
	push	word [0x3fc]
	push	word [0x8c30]
	push	word [0x3f0]
	push	word [0x3ee]
	push	word [0x3f4]
	push	word [0x3f2]
	call	sub_cfe
	add	sp,byte +0xc
	jmp	short .L4

.L3:
	mov	ax,[0x3fc]
	mov_dx_ax
	les	di,[0x3ee]
	lds	si,[0x3f2]
	cld

.L7:
	lodsw
	test	ax,ax
	mov_cx_ax
	jns	.L5
	neg	cx
	cmp_cx_dx
	ja	.L1
	sub_dx_cx
	lodsb
	rep	stosb
	jmp	short .L6

.L5:
	cmp_cx_dx
	ja	.L1
	sub_dx_cx
	rep	movsb

.L6:
	test	dx,dx
	jnz	.L7
	xor_ax_ax

.L4:
	pop	ds
	mov_sp_bp
	pop	bp
	ret

.L1:
	mov	ax,0xffff
	jmp	short .L4

sub_e76:
	cmp	word [0x8c2c],byte +0x0
	jnz	.L1
	push	es
	push	di
	push	cx
	push	dx
	call	sub_eba
	pop	dx
	pop	cx
	pop	di
	pop	es
	test	ax,ax
	jnz	.L2

.L1:
	mov_cx_dx
	cmp	cx,[0x8c2c]
	jna	.L3
	mov	cx,[0x8c2c]

.L3:
	sub_dx_cx
	sub	[0x8c2c],cx
	push	ds
	lds	si,[0x8c28]
	cld
	shr	cx,1
	rep	movsw
	adc_cx_cx
	rep	movsb
	pop	ds
	mov	[0x8c28],si
	test	dx,dx
	jnz	sub_e76
	xor_ax_ax

.L2:
	test	ax,ax
	ret

sub_eba:
	push	word [0x3fa]
	push	word [0x3f8]
	push	word [0x3f6]
	push	word [0x3ec]
	call	sub_1359
	add	sp,byte +0x8
	cmp	ax,byte -0x1
	jz	.L0
	mov	[0x8c2c],ax
	mov	ax,0xffff
	cmp	word [0x8c2c],byte +0x0
	jz	.L0
	push	word [0x8c2c]
	push	word [0x3f8]
	push	word [0x3f6]
	call	sub_9da
	add	sp,byte +0x6
	mov	[0x400],ax
	mov	ax,[0x3f6]
	mov	[0x8c28],ax
	mov	ax,[0x3f8]
	mov	[0x8c2a],ax
	xor_ax_ax

.L0:
	ret

sub_f06:
	push	bp
	mov_bp_sp
	add	sp,byte -0xe
	cmp	byte [0x40d],0x0
	jz	.L1
	mov	al,[bp+0x6]
	push	ax
	mov	al,[bp+0x4]
	push	ax
	mov	al,[0x424]
	push	ax
	call	sub_1230
	add	sp,byte +0x6

.L1:
	mov	byte [bp-0xd],0x0
	xor_ah_ah
	mov	al,[bp+0x6]
	mov	[bp-0xc],ax
	mov	al,[bp+0x4]
	mov	[bp-0xa],ax
	mov	al,[0x407]
	mov	[bp-0x6],ax
	mov	word [bp-0x8],0x0
	lea	dx,[bp-0xd]
	mov	cx,0x842
	mov	bl,[0x424]
	call	sub_1296
	jc	.L2
	mov	ax,[bp+0x8]
	mov	[bp-0x4],ax
	mov	dx,[bp+0xa]
	mov	[bp-0x2],dx
	or_ax_dx
	jz	.L3
	mov	byte [bp-0xd],0x0
	xor_ah_ah
	mov	al,[bp+0x6]
	mov	[bp-0xc],ax
	mov	al,[bp+0x4]
	mov	[bp-0xa],ax
	mov	al,[0x407]
	mov	[bp-0x6],ax
	mov	word [bp-0x8],0x0
	lea	dx,[bp-0xd]
	mov	cx,0x841
	mov	bl,[0x424]
	call	sub_1296
	jc	.L2

.L3:
	xor_ax_ax

.L2:
	xor_ah_ah
	mov_sp_bp
	pop	bp
	ret

sub_f95:
	push	bp
	mov_bp_sp
	add	sp,0xff46
	mov	ax,0x1900 ; get default drive
	int	0x21
	mov_dl_al
	mov	ax,0xe00 ; set default drive
	int	0x21
	add	al,0x40
	mov	[bp-0xba],al
	mov	byte [bp-0xb9],0x41

.L3:
	mov	al,[bp+0x6]
	cmp	al,[bp-0xb9]
	jz	.L1
	lea	ax,[bp-0xb8]
	push	ax
	mov	al,[bp-0xb9]
	push	ax
	call	sub_ff1
	add	sp,byte +0x4
	test	al,al
	jz	.L1
	cmp	al,[bp+0x4]
	jz	.L2

.L1:
	inc	byte [bp-0xb9]
	mov	al,[bp-0xb9]
	cmp	al,[bp-0xba]
	jnz	.L3
	xor_ax_ax

.L4:
	mov_sp_bp
	pop	bp
	ret

.L2:
	mov	al,[bp-0xb9]
	xor_ah_ah
	jmp	short .L4

sub_ff1:
	push	bp
	mov_bp_sp
	mov	bx,[bp+0x6]
	mov	byte [bx],0x0
	mov	cx,0x860
	mov_dx_bx
	mov	bl,[bp+0x4]
	sub	bl,0x40
	call	sub_1296
	mov	ax,0x0
	jc	.L0
	mov	bx,[bp+0x6]
	mov	al,[bx+0x1]
	mov_dl_al
	inc	dl
	cmp	al,0x2
	jna	.L1
	mov	dl,0x4
	cmp	al,0x7
	jz	.L2
	mov	dl,0x6
	cmp	al,0x9
	jz	.L1
	xor_ax_ax
	jmp	short .L0

.L2:
	cmp	word [bx+0x14],byte +0x24
	jnz	.L1
	mov	dl,0x6

.L1:
	xor_ax_ax
	cmp	word [bx+0x4],byte +0x55
	jnc	.L0
	mov_al_dl
	xor_ah_ah

.L0:
	pop	bp
	ret

byte_e41:
	db	0x00,0x00
	db	0x02,0x04
	db	0x04,0x06
	db	0x04,0x06
	db	0x06,0x00
	db	0x02,0x00
	db	0x00,0x00

sub_104f:
	push	bp
	mov_bp_sp
	mov	al,[bp+0x6]
	push	ax
	mov	al,[bp+0x4]
	push	ax
	call	sub_f95
	add	sp,byte +0x4
	test	al,al
	jnz	.L0
	mov	bl,[bp+0x4]
	xor_bh_bh
	shl	bx,1
	cmp	byte [cs:bx+0xe41],0x0
	jz	.L0
	push	bx
	mov	al,[bp+0x6]
	push	ax
	mov	al,[cs:bx+0xe41]
	push	ax
	call	sub_f95
	add	sp,byte +0x4
	pop	bx
	test	al,al
	jnz	.L0
	inc	bx
	cmp	byte [cs:bx+0xe41],0x0
	jz	.L0
	mov	al,[bp+0x6]
	push	ax
	mov	al,[cs:bx+0xe41]
	push	ax
	call	0xf95
	add	sp,byte +0x4

.L0:
	pop	bp
	ret

	;	0xea4

	db	0x00,0x02,0x02,0x01,0x00,0x02,0x70,0x00,0xd0,0x02,0xfd,0x02
	db	0x00,0x09,0x00,0x02,0x00,0x28

	;	0xeb6

	db	0x00,0x02,0x02,0x01,0x00,0x02,0x70,0x00,0xa0,0x05
	db	0xf9,0x03,0x00,0x09,0x00,0x02,0x00,0x50

	;	0xec8

	db	0x00,0x02,0x01,0x01,0x00,0x02,0xe0,0x00
	db	0x60,0x09,0xf9,0x07,0x00,0x0f,0x00,0x02,0x00,0x50

	;	0xeda
	db	0x00,0x02,0x01,0x01,0x00,0x02
	db	0xe0,0x00,0x40,0x0b,0xf0,0x09,0x00,0x12,0x00,0x02,0x00,0x50

	;	0xeec

	db	0x00,0x02,0x02,0x01
	db	0x00,0x02,0xf0,0x00,0x80,0x16,0xf0,0x09,0x00,0x24,0x00,0x02,0x00,0x50

	;	0xefe

	dw	0x0ea4
	dw	0x0ea4
	dw	0x0eb6
	dw	0x0ea4
	dw	0x0ec8
	dw	0x0eda
	dw	0x0eb6
	dw	0x0eb6
	dw	0x0ec8
	dw	0x0eb6
	dw	0x0eda
	dw	0x0eda
	dw	0x0eb6
	dw	0x0ec8
	dw	0x0ec8
	dw	0x0eb6
	dw	0x0eda
	dw	0x0eec

sub_1122:
	push bp
	mov_bp_sp
	add	sp,0xff48
	mov	al,[0x423]
	and	al,0x1f
	mov	[0x424],al
	mov	ax,0xd00
	int	0x21
	cmp	byte [bp+0x4],0x0
	ljz	.L1
	lea	ax,[bp-0xb8]
	push	ax
	mov	al,[0x423]
	push	ax
	call	sub_ff1
	add	sp,byte +0x4
	mov	dx,0xfffe
	test	al,al
	ljz	.L2
	push	ax
	mov	di,0x8e36
	lea	si,[bp-0xb8]
	mov	cx,0xb8
	cld
	rep	movsb
	pop	ax
	dec	al
	mov_bl_al
	shl	bl,1
	add_bl_al
	add	bl,[0x410]
	xor_bh_bh
	shl	bx,1
	mov	si,[cs:bx+0xefe]
	lea	di,[bp-0xb1]
	push	di
	push	ss
	pop	es
	xor_al_al
	mov	cx,0x1f
	cld
	rep	stosb
	pop	di
	mov	cx,0x11
	cs	rep movsb
	mov	al,[cs:si]
	xor_ah_ah
	mov	[bp-0xb4],ax
	mov	di,0x8eee
	lea	si,[bp-0xb8]
	mov	cx,0xb8
	cld
	rep	movsb
	call	sub_11f6
	mov	ax,0x3000 ; get dos version
	int	0x21
	cmp	al,0x4
	jc	.L3
	mov	byte [bp-0xb8],0x0
	mov	byte [bp-0xb7],0x1
	lea	dx,[bp-0xb8]
	mov	bl,[0x424]
	mov	cx,0x847
	call	sub_1296
	xor_al_al
	push	ax
	push	ax
	mov	al,[0x424]
	push	ax
	call	sub_1230
	add	sp,byte +0x6

.L3:
	xor_dx_dx

.L2:
	mov_ax_dx
	mov_sp_bp
	pop	bp
	ret

.L1:
	mov	bx,0x8e36
	mov	byte [bx],0x4
	mov_dx_bx
	mov	bl,[0x424]
	mov	cx,0x840
	call	sub_1296
	jmp	short .L3

sub_11f6:
	push	si
	push	di
	mov	di,0x8fa6
	push	ds
	pop	es
	mov	cx,0x24
	cld
	mov	al,0xff
	push	di
	rep	stosb
	pop	di
	mov	al,[0x40b]
	inc	al
	xor_bx_bx
	mov	cx,[0x8f02]
	mov_ah_cl

.L6:
	cmp_bl_ah
	jc	.L4
	sub_bl_ah

.L4:
	cmp	byte [bx+di],0xff
	jz	.L5
	inc	bl
	jmp	short .L6

.L5:
	mov	[bx+di],al
	inc	al
	add	bl,[0x40c]
	loop	.L6
	pop	di
	pop	si
	ret

sub_1230:
	push	bp
	mov_bp_sp
	push	si
	push	di
	mov	cx,[0x8f02]
	mov	di,0x8f14
	push	ds
	pop	es
	cld
	mov_ax_cx
	stosw
	mov	dh,[bp+0x6]
	mov	dl,[0x40d]
	test	dl,dl
	jns	.L1
	neg	dl
	cmp	byte [0x408],0x2
	jnz	.L1
	shl	dh,1
	add	dh,[bp+0x8]

.L1:
	mov_al_cl
	sub_al_dl
	mul	dh
	div	cl
	mov_bl_ah
	xor_bh_bh
	xor_ah_ah
	mov	dx,[0x8ef5]
	mov_si_cx

.L3:
	mov	al,[bx+0x8fa6]
	stosw
	xchg	ax,dx
	stosw
	xchg	ax,dx
	inc	bl
	cmp_bx_si
	jc	.L2
	sub_bx_si

.L2:
	loop	.L3
	mov	byte [0x8eee],0x5
	mov	dx,0x8eee
	mov	cx,0x840
	mov	bl,[bp+0x4]
	call	sub_1296
	pop	di
	pop	si
	pop	bp
	ret

sub_1296:
	mov	ax,0x440d ; DOS ioctl
	int	0x21
	ret


	; 109c

	dw	0xa001
	dw	0xf001
	dw	0xd801
	dw	0xcc01
	dw	0xc601
	dw	0xc301
	dw	0xc181
	dw	0xc0c1

sub_12ac:
	mov	di,0x8c36
	xor_cx_cx

.L3:
	xor_ax_ax
	mov	bx,0x109c
	mov_cl_ch

.L2:
	shl	cl,1
	jnc	.L1
	xor	ax,[cs:bx]

.L1:
	inc	bx
	inc	bx
	test	cl,cl
	jnz	.L2
	stosw
	inc	ch
	jnz	.L3
	mov	byte [cs:0x109c],0x0
	ret

sub_12d1:
	push bp
	mov_bp_sp
	push	ds
	push	ds
	pop	es
	cld
	cmp	byte [cs:0x109c],0x0
	jz	.L1
	call	sub_12ac

.L1:
	mov	cx,[bp+0x8]
	lds	si,[bp+0x4]
	mov	di,0x8c36
	xor_dx_dx

.L2:
	lodsb
	xor_dl_al
	xor_bx_bx
	xchg	dl,bl
	shl	bx,1
	xchg	dl,dh
	xor	dx,[es:bx+di]
	loop	.L2
	mov_ax_dx
	pop	ds
	pop	bp
	ret

	db	0x00

sub_1304:
	mov	ah,0x30 ; get dos version
	int	0x21
	xchg	al,ah
	ret

sub_130b:
	push	es
	push	si
	mov	ah,0x51
	int	0x21 ; get psp address
	mov	es,bx
	mov	ax,[es:0x2c] ; environment segment
	mov	si,0x80
	mov	bl,[es:si] ; bytes on command line
	xor_bh_bh
	inc	si
	mov	[es:bx+si],bh ; zero out command line?
	mov	cx,es
	mov_dx_si
	pop	si
	pop	es
	ret

sub_132a:
	mov	ah,0x19 ; get current default drive
	int	0x21
	add	al,0x41
	xor_ah_ah
	ret

sub_1333:
	push	bp
	mov_bp_sp
	push	ds
	lds	dx,[bp+0x4]
	mov	ax,[bp+0x8]
	mov	ah,0x3d ; open existing file
	int	0x21
	pop	ds
	mov	dx,0xffff
	jc	.L1
	mov_dx_ax

.L1:
	mov_ax_dx
	pop	bp
	ret

sub_134d:
	push	bp
	mov_bp_sp
	mov	bx,[bp+0x4]
	mov	ah,0x3e ; close file
	int	0x21
	pop	bp
	ret

sub_1359:
	push bp
	mov_bp_sp
	push	ds
	mov	ah,0x3f ; read file
	mov	bx,[bp+0x4]
	mov	cx,[bp+0xa]
	lds	dx,[bp+0x6]
	int	0x21
	pop	ds
	mov	dx,0xffff
	jc	.L1
	mov_dx_ax

.L1:
	mov_ax_dx
	pop	bp
	ret

sub_1376:
	push bp
	mov_bp_sp
	push	ds
	mov	ah,0x40 ; write file
	mov	bx,[bp+0x4]
	mov	cx,[bp+0xa]
	lds	dx,[bp+0x6]
	int	0x21
	pop	ds
	mov	dx,0xffff
	jc	.L1
	mov_dx_ax

.L1:
	mov_ax_dx
	pop	bp
	ret

sub_1393:
	push	bp
	mov_bp_sp
	add	sp,byte -0x4
	mov	ax,[bp+0xa]
	mov	ah,0x42 ; dos lseek
	mov	bx,[bp+0x4]
	mov	dx,[bp+0x6]
	mov	cx,[bp+0x8]
	int	0x21
	mov_sp_bp
	pop	bp
	ret

sub_13ad:
	push	bp
	mov_bp_sp
	mov	ax,[bp+0x4]
	mov	ah,0x4c
	int	0x21 ; exit with errorlevel
	pop	bp
	ret

sub_13b9:
	push	bp
	mov_bp_sp
	mov	ah,0x48 ; allocate memory
	mov	bx,[bp+0x4]
	int	0x21
	jnc	.L0
	xor_ax_ax

.L0:
	pop	bp
	ret

sub_13c9:
	push bp
	mov_bp_sp
	push	es
	mov	es,[bp+0x4]
	mov	ah,0x49
	int	0x21
	pop	es
	pop	bp
	ret

sub_13d7:
	push	bp
	mov_bp_sp
	push	es
	mov	bx,[bp+0x6]
	mov	es,[bp+0x4]
	mov	ah,0x4a
	int	0x21
	pop	es
	mov	ax,[bp+0x4]
	jnc	.L1
	xor_ax_ax

.L1:
	pop bp
	ret

sub_13ef:
	mov	ah,0x7
	int	0x21
	xor_ah_ah
	test	al,al
	jnz	.L0
	mov	ah,0x7
	int	0x21
	mov	ah,0x40

.L0:
	ret

sub_1400:
	mov	ax,0xc00
	int	0x21
	ret

sub_1406:
	push	bp
	push	si
	push	di
	int	0x10
	pop	di
	pop	si
	pop	bp
	ret

sub_140f:
	ret

sub_1410:
	push bp
	mov_bp_sp
	mov	ax,0x1
	push	ax
	push	ss
	lea	ax,[bp+0x4]
	push	ax
	call	sub_1424
	add	sp,byte +0x6
	pop	bp
	ret

sub_1424:
	push	bp
	mov_bp_sp
	add	sp,byte -0x2
	cmp	word [bp+0x8],byte +0x0
	jnz	.L1
	les	di,[bp+0x4]
	mov	cx,0xffff
	xor_ax_ax
	cld
	repne	scasb
	sub	di,[bp+0x4]
	dec	di
	mov	[bp+0x8],di

.L1:
	mov	ah,0x3
	xor_bh_bh
	call	sub_1406
	mov	[bp-0x1],dh
	mov	[bp-0x2],dl

.L8:
	les	di,[bp+0x4]
	mov	dl,[es:di]
	inc	word [bp+0x4]
	cmp	dl,0x20
	jnc	.L2
	cmp	dl,0xd
	jz	.L3
	inc	byte [bp-0x1]
	cmp	dl,0xa
	jz	.L4
	dec	byte [bp-0x1]
	cmp	dl,0x9
	jnz	.L5
	mov	al,[bp-0x2]
	add	al,0x8
	and	al,0xf8
	mov	[bp-0x2],al
	inc	byte [bp-0x1]
	cmp	byte [bp-0x2],0x50
	jnc	.L3
	dec	byte [bp-0x1]
	jmp	short .L6

.L5:
	cmp	dl,0x7
	jnz	.L7
	mov	ax,0xe07
	xor_bx_bx
	call	sub_1406
	jmp	short .L6

.L7:
	cmp	dl,0x8
	jnz	.L6
	cmp	byte [bp-0x2],0x0
	jz	.L6
	dec	byte [bp-0x2]
	jmp	short .L6

.L2:
	mov	al,[bp-0x2]
	push	ax
	mov	al,[bp-0x1]
	push	ax
	call	sub_152a
	add	sp,byte +0x4
	mov	ah,0x9
	mov	al,[es:di]
	xor_bh_bh
	mov	bl,[0x3e4]
	mov	cx,0x1
	call	sub_1406
	inc	byte [bp-0x2]
	cmp	byte [bp-0x2],0x50
	jc	.L6
	inc	byte [bp-0x1]

.L3:
	mov	byte [bp-0x2],0x0

.L4:
	cmp	byte [bp-0x1],0x19
	jc	.L6
	dec	byte [bp-0x1]
	mov	ax,0x601
	mov	bh,[0x3e4]
	xor_cx_cx
	mov	dx,0x184f
	call	sub_1406

.L6:
	dec	word [bp+0x8]
	ljnz	.L8
	mov	al,[bp-0x2]
	push	ax
	mov	al,[bp-0x1]
	push	ax
	call	sub_152a
	add	sp,byte +0x4
	mov_sp_bp
	pop	bp
	ret

sub_150a:
	push	bp
	mov_bp_sp
	mov	ax,0x600
	mov	bh,[bp+0x4]
	mov	[0x3e4],bh
	xor_cx_cx
	mov	dx,0x184f
	call	sub_1406
	xor_bx_bx
	xor_dx_dx
	mov	ah,0x2
	call	sub_1406
	pop	bp
	ret

sub_152a:
	push	bp
	mov_bp_sp
	mov	dh,[bp+0x4]
	mov	dl,[bp+0x6]
	mov	ah,0x2
	xor_bh_bh
	call	sub_1406
	pop	bp
	ret

sub_153c:
	push	bp
	mov_bp_sp
	mov	al,[bp+0x4]
	mov	[0x3e4],al
	pop	bp
	ret

sub_1547:
	push	bp
	mov_bp_sp
	mov	ah,0x3
	xor_bh_bh
	call	sub_1406
	push	dx
	xor_dl_dl
	mov	ah,0x2
	xor_bh_bh
	call	sub_1406
	mov	ax,0x920
	xor_bh_bh
	mov	bl,[bp+0x4]
	mov	[0x3e4],bl
	mov	cx,0x50
	call	sub_1406
	pop	ax
	mov	ah,0x2
	xor_bh_bh
	call	sub_1406
	pop	bp
	ret

	db	0x00

sub_1578:
	push	bp
	mov_bp_sp
	add	sp,byte -0x14
	push	word [bp+0x4]
	call	sub_846
	add	sp,byte +0x2
	test	ax,ax
	ljs	.L0
	call	sub_a93
	mov	ax,0x8
	push	ax
	push	ss
	lea	ax,[bp-0x8]
	push	ax
	call	sub_70c
	add	sp,byte +0x6
	mov	dh,[bp-0x4]
	xor_dl_dl
	shl	dx,1
	mov	ax,[bp-0x6]
	test	ax,ax
	jz	.L1
	sub	ax,0x200
	add_dx_ax

.L1:
	sub	dx,byte +0x8
	mov	[bp-0xc],dx
	mov	ax,[bp-0x2]
	mov	[bp-0x10],ax
	add_dx_ax
	add	dx,byte +0xf
	shr	dx,1
	shr	dx,1
	shr	dx,1
	shr	dx,1
	push	dx
	call	sub_13b9
	add	sp,byte +0x2
	mov	[bp-0xa],ax
	mov_dx_ax
	test	ax,ax
	mov	ax,0xffff
	jz	.L0
	mov	[bp-0x12],dx
	mov	[bp-0xe],dx
	mov	word [bp-0x14],0x0
	push	word [bp-0xc]
	push	word [bp-0xe]
	push	word [bp-0x10]
	call	sub_70c
	add	sp,byte +0x6
	push	word [bp-0x2]
	push	word [bp-0x6]
	push	word [bp-0x12]
	push	word [bp-0x14]
	push	word [bp-0xe]
	push	word [bp-0x10]
	call	sub_cfe
	add	sp,byte +0xc
	test	ax,ax
	jnz	.L2
	xor_di_di
	mov	es,[bp-0xa]
	mov	byte [0x8fca],0x0

.L3:
	mov	cx,0x53
	mov_dx_di
	mov	al,0xa
	cld
	repne	scasb
	jnz	.L2
	mov_cx_di
	sub_cx_dx
	push	di
	push	es
	push	cx
	push	es
	push	dx
	call	sub_165a
	add	sp,byte +0x6
	pop	es
	pop	di
	test	ax,ax
	jz	.L3
	dec	ax
	jz	.L2
	mov	ax,0xa
	push	ax
	call	sub_13ad
	add	sp,byte +0x2

.L2:
	push	word [bp-0xa]
	call	sub_13c9
	add	sp,byte +0x2

.L0:
	mov_sp_bp
	pop	bp
	ret

sub_165a:
	push	bp
	mov_bp_sp
	add	sp,byte -0x2
	cmp	byte [0x8fca],0x0
	jz	.L1
	dec	byte [0x8fca]
	jmp	short .L2

.L1:
	les	bx,[bp+0x4]
	cmp	byte [es:bx],0x1f
	jz	.L3
	push	word [bp+0x8]
	push	word [bp+0x6]
	push	word [bp+0x4]
	call	sub_1424
	add	sp,byte +0x6

.L2:
	xor_ax_ax

.L0:
	mov_sp_bp
	pop	bp
	ret

.L3:
	inc	bx
	mov	dl,[es:bx]
	cmp	dl,0x1
	jnz	.L4
	mov	dl,[es:bx+0x1]
	and	dl,0x7f
	mov_al_dl
	push	ax
	call	sub_150a
	add	sp,byte +0x2
	jmp	short .L2

.L4:
	mov	ax,0x2
	cmp	dl,0x3
	jz	.L0
	mov	ax,0x1
	cmp	dl,0x2
	jz	.L0
	cmp	dl,0x4
	jnz	.L5
	inc	bx
	mov	dl,[es:bx]
	and	dl,0x7f
	mov	[bp-0x1],dl
	inc	bx
	mov	cl,[es:bx]
	inc	bx
	and	cx,byte +0x7f
	push	cx
	mov	[bp+0x4],bx
	xor_al_al
	push	ax
	mov	al,0x18
	push	ax
	call	sub_152a
	add	sp,byte +0x4
	mov	al,[bp-0x1]
	push	ax
	call	sub_153c
	add	sp,byte +0x2
	mov	al,[bp-0x1]
	push	ax
	call	sub_1547
	add	sp,byte +0x2
	pop	dx
	push	dx
	push	word [bp+0x6]
	push	word [bp+0x4]
	call	sub_1424
	add	sp,byte +0x6
	mov	al,0x1
	push	ax
	mov	ax,0x13
	push	ax
	mov	ax,0x8fcb
	push	ax
	call	sub_77b
	add	sp,byte +0x6
	cmp	ax,byte -0x1
	ljnz	.L2
	mov	word [0x8fcb],0xff
	jmp	.L2

.L5:
	cmp	dl,0x8
	jnz	.L6
	inc	bx
	mov	dl,[es:bx]
	and	dl,0x7f
	mov_al_dl
	push	ax
	call	sub_153c
	add	sp,byte +0x2
	jmp	.L2

.L6:
	xor_cx_cx
	cmp	dl,0x5
	jz	.L7
	inc	cx
	cmp	dl,0x6
	jnz	.L8

.L7:
	inc	bx
	mov	si,0x8fcb
	cld
	mov	dx,0x1

.L10:
	lodsb
	cmp	al,[es:bx]
	jnz	.L9
	inc	bx
	test	al,al
	jnz	.L10
	dec	dx

.L9:
	xor_dx_cx
	jz	.L11
	mov	byte [0x8fca],0x1

.L11:
	jmp	.L2

.L8:
	cmp	dl,0x7
	jnz	.L11
	mov	al,[es:bx+0x1]
	and	al,0x7f
	mov	[0x8fca],al
	jmp	.L2

	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	"Copyright 1995, Sydex, Inc. All Rights Reserved. ",0x0d,0x0a,0x00
	db	"low",0x00
	db	"high",0x00
	db	"extended",0x00
	dw	0x0042
	dw	0x0046
	dw	0x004b
	db	0x0d,"000 percent",0x00
	db	'360K 5.25"',0x00
	db	'1.2M 5.25"',0x00
	db	'720K  3.5"',0x00
	db	'1.44M 3.5"',0x00
	db	"   8 inch ",0x00
	db	'2.88M 3.5"',0x00
	db	`\r\nNot enough memory to execute.\r\n`,0x00
	db	`\r\nRequires at least DOS 3.3\r\n`,0x00

	; '\nSelf-extracting diskette image processor (DOS), Version 1.03\n\x00'
	db	0x5f,0x0c,0x69,0x05,0x63,0x4e,0x2b
	db	0x53,0x27,0x55,0x34,0x57,0x23,0x4a,0x24,0x43,0x63,0x07,0x6e,0x1d,0x76,0x13,0x67
	db	0x13,0x76,0x56,0x3f,0x52,0x33,0x54,0x31,0x11,0x61,0x13,0x7c,0x1f,0x7a,0x09,0x7a
	db	0x15,0x67,0x47,0x6f,0x2b,0x64,0x37,0x1e,0x32,0x12,0x44,0x21,0x53,0x20,0x49,0x26
	db	0x48,0x68,0x59,0x77,0x47,0x74,0x7e,0x7e

	db	0x5f,0x0b,0x63,0x06,0x26,0x4f,0x22,0x43
	db	0x24,0x41,0x61,0x07,0x6e,0x02,0x67,0x47,0x2f,0x4e,0x3d,0x1d,0x7f,0x1a,0x7f,0x11
	db	0x31,0x52,0x3d,0x4f,0x3d,0x48,0x38,0x4c,0x29,0x4d,0x63,0x69,0x69,0x5f,0x1a,0x62
	db	0x16,0x64,0x05,0x66,0x12,0x7b,0x14,0x7a,0x5a,0x39,0x58,0x36,0x55,0x30,0x5c,0x39
	db	0x5d,0x7d,0x1f,0x66,0x46,0x33,0x40,0x25,0x57,0x79,0x73,0x73

	db	0x5f,0x16,0x78,0x0b
	db	0x7e,0x18,0x7e,0x17,0x74,0x1d,0x78,0x16,0x62,0x42,0x2f,0x4a,0x27,0x55,0x3a,0x43
	db	0x6d,0x67,0x67

	db	0x5f,0x0f,0x63,0x06,0x67,0x14,0x71,0x51,0x34,0x5a,0x2e,0x4b,0x39
	db	0x19,0x78,0x58,0x3c,0x4e,0x27,0x51,0x34,0x14,0x78,0x1d,0x69,0x1d,0x78,0x0a,0x2a
	db	0x49,0x26,0x4b,0x3b,0x5a,0x2e,0x47,0x25,0x49,0x2c,0x0c,0x7b,0x12,0x66,0x0e,0x2e
	db	0x4f,0x6f,0x6f

	db	0x75,0x11,0x78,0x0b,0x60,0x4c,0x46,0x29,0x5b,0x7b,0x0b,0x79,0x1c
	db	0x6f,0x1c,0x3c,0x79,0x2a,0x69,0x49,0x3d,0x52,0x72,0x03,0x76,0x1f,0x6b,0x51,0x71
	db	0x51,0x51

	db	0x5f,0x5f

	db	0x5f,0x16,0x7b,0x1a,0x7d,0x18,0x38,0x5e,0x37,0x5b,0x3e,0x11
	db	0x65,0x04,0x76,0x11,0x74,0x00,0x20,0x44,0x36,0x5f,0x29,0x4c,0x6c,0x0f,0x60,0x0e
	db	0x68,0x04,0x6d,0x0e,0x7a,0x54,0x74,0x54,0x07,0x62,0x0e,0x6b,0x08,0x7c,0x5c,0x3d
	db	0x53,0x3c,0x48,0x20,0x45,0x37,0x17,0x73,0x01,0x68,0x1e,0x7b,0x57,0x5d,0x32,0x40
	db	0x60,0x03,0x6c,0x1c,0x65,0x45,0x31,0x59,0x30,0x43,0x63,0x05,0x6c,0x00,0x65,0x45
	db	0x31,0x5e,0x7e,0x1f,0x71,0x1e,0x6a,0x02,0x67,0x15,0x35,0x51,0x23,0x4a,0x3c,0x59
	db	0x79,0x18,0x76,0x12,0x32,0x46,0x34,0x4d,0x6d,0x0c,0x6b,0x0a,0x63,0x0d,0x23,0x29
	db	0x23,0x23,0x5f,0x0b,0x63,0x0a,0x79,0x59,0x3f,0x56,0x3a,0x5f,0x7f,0x08,0x69,0x1a
	db	0x3a,0x59,0x2b,0x4e,0x2f,0x5b,0x3e,0x5a,0x7a,0x15,0x7b,0x5b,0x5b

	db	0x5f,0x55,0x55

	db	0x75,0x55,0x55
	db	0x5f,0x5f

	; "\nPlease enter the required password: "
	db	0x5f,0x0f,0x63,0x06,0x67,0x14,0x71,0x51,0x34,0x5a,0x2e
	db	0x4b,0x39,0x19,0x6d,0x05,0x60,0x40,0x32,0x57,0x26,0x53,0x3a,0x48,0x2d,0x49,0x69
	db	0x19,0x78,0x0b,0x78,0x0f,0x60,0x12,0x76,0x4c,0x6c,0x6c

	; "\nThe password is incorrect.\n"
	db	0x5f,0x0b,0x63,0x06,0x26
	db	0x56,0x37,0x44,0x37,0x40,0x2f,0x5d,0x39,0x19,0x70,0x03,0x23,0x4a,0x24,0x47,0x28
	db	0x5a,0x28,0x4d,0x2e,0x5a,0x74,0x7e,0x7e

	; "\nInsert a blank"
	db	0x5f,0x16,0x78,0x0b,0x6e,0x1c,0x68,0x48
	db	0x29,0x09,0x6b,0x07,0x66,0x08,0x63,0x43,0x43

	; "density disk in drive"
	db	0x78,0x1c,0x79,0x17,0x64,0x0d,0x79
	db	0x00,0x20,0x44,0x2d,0x5e,0x35,0x50,0x24,0x50,0x35,0x15,0x7c,0x12,0x32,0x56,0x24
	db	0x4d,0x3b,0x5e,0x7e,0x7e

	; "Press ENTER to extract, or ESC to exit"
	db	0x7b,0x71,0x21,0x53,0x36,0x45,0x36,0x16,0x53,0x1d,0x49
	db	0x0c,0x5e,0x7e,0x0a,0x65,0x45,0x20,0x58,0x2c,0x5e,0x3f,0x5c,0x28,0x04,0x24,0x4b
	db	0x39,0x19,0x5c,0x0f,0x4c,0x6c,0x18,0x77,0x57,0x32,0x4a,0x23,0x57,0x77,0x5a,0x5a

	; "Extraction complete"
	db	0x5f,0x1a,0x62,0x16,0x64,0x05,0x66,0x12,0x7b,0x14,0x7a,0x5a,0x19,0x76,0x1b,0x6b
	db	0x07,0x62,0x16,0x73,0x79,0x79

	; 'Press "Y" to do another copy"
	db	0x5f,0x0f,0x7d,0x18,0x6b,0x18,0x38,0x1a,0x43,0x61
	db	0x41,0x35,0x5a,0x7a,0x1e,0x71,0x51,0x30,0x5e,0x31,0x45,0x2d,0x48,0x3a,0x1a,0x79
	db	0x16,0x66,0x1f,0x25,0x05,0x05

	; "Diskette error -- try another"
	db	0x5f,0x1b,0x72,0x01,0x6a,0x0f,0x7b,0x0f,0x6a,0x4a
	db	0x2f,0x5d,0x2f,0x40,0x32,0x12,0x3f,0x1f,0x6b,0x19,0x60,0x40,0x21,0x4f,0x20,0x54
	db	0x3c,0x59,0x2b,0x05,0x0f,0x0f

	db	0x20,0x01,0x30,0x02,0x40,0x03,0x30,0x04,0x30,0x05
	db	0x10,0x06,0x20,0x00,0x10,0x01,0x10,0x02,0x10,0x03,0x08,0x04,0x08,0x05,0x08,0x06
	db	0x08,0x07,0x08,0x08,0x08,0x09,0x08,0x0a,0x08,0x0b,0x04,0x0c,0x04,0x0d,0x04,0x0e
	db	0x04,0x0f,0x04,0x10,0x04,0x11,0x04,0x12,0x04,0x13,0x04,0x14,0x04,0x15,0x04,0x16
	db	0x04,0x17,0x02,0x18,0x02,0x19,0x02,0x1a,0x02,0x1b,0x02,0x1c,0x02,0x1d,0x02,0x1e
	db	0x02,0x1f,0x02,0x20,0x02,0x21,0x02,0x22,0x02,0x23,0x02,0x24,0x02,0x25,0x02,0x26
	db	0x02,0x27,0x02,0x28,0x02,0x29,0x02,0x2a,0x02,0x2b,0x02,0x2c,0x02,0x2d,0x02,0x2e
	db	0x02,0x2f,0x01,0x30,0x01,0x31,0x01,0x32,0x01,0x33,0x01,0x34,0x01,0x35,0x01,0x36
	db	0x01,0x37,0x01,0x38,0x01,0x39,0x01,0x3a,0x01,0x3b,0x01,0x3c,0x01,0x3d,0x01,0x3e
	db	0x01,0x3f,0x00,0x00,0x07,0xff,0xff,0x19,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00

